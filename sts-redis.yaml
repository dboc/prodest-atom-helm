{{- if .Values.redis.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "atom.fullname" . }}-redis
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "atom.component.labels" (list . "redis") | nindent 4 }}
spec:
  serviceName: {{ include "atom.fullname" . }}-redis
  replicas: 1
  selector:
    matchLabels:
      {{- include "atom.component.selectorLabels" (list . "redis") | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "atom.component.selectorLabels" (list . "redis") | nindent 8 }}
    spec:
      serviceAccountName: {{ include "atom.serviceAccountName" . }}
      securityContext:
        fsGroup: {{ .Values.general.user_uid }}
        runAsUser: {{ .Values.general.user_uid }}
        runAsGroup: {{ .Values.general.user_uid }}
      containers:
        - name: redis
          image: "{{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}"
          imagePullPolicy: {{ .Values.redis.image.pullPolicy }}
          securityContext:
            runAsUser: {{ .Values.general.user_uid }}
            runAsGroup: {{ .Values.general.user_uid }}
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          ports:
            - containerPort: 6379
              name: redis
          # Adicionar args ou configmap para configurar o Redis, se necessário
          # Exemplo: command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
          volumeMounts:
            - name: redis-persistent-storage
              mountPath: /data
          # Liveness and Readiness probes são recomendadas
          # livenessProbe:
          #   tcpSocket:
          #     port: 6379
          #   initialDelaySeconds: 30
          #   timeoutSeconds: 5
          # readinessProbe:
          #   exec:
          #     command:
          #     - redis-cli
          #     - ping
          #   initialDelaySeconds: 5
          #   timeoutSeconds: 1
  volumeClaimTemplates:
    - metadata:
        name: redis-persistent-storage
      spec:
        accessModes: [ "{{ .Values.redis.persistence.accessMode }}" ]
        {{- if .Values.redis.persistence.storageClass }}
        storageClassName: "{{ .Values.redis.persistence.storageClass }}"
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.redis.persistence.size | quote }}
{{- end }}